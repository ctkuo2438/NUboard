package com.neu.nuboard.model;

import com.neu.nuboard.utils.UUIDutil;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "event") // psql table name
public class Event {
    /**
     * The UUID of the event.
     * id is a primary key of the event table.
     * It is generated by the database.
     */
    @Id
    @Column(name = "id", updatable = false, nullable = false)
    private String id;

    /**
     * The title of the event.
     * title is a required field.
     */
    @Column(name = "title", nullable = false)
    private String title;

    /**
     * The description of the event.
     * description is an optional field.
     */
    @Column(name = "description", nullable = true, columnDefinition = "TEXT")
    private String description;

    /**
     * The date of the event.
     * eventDate is a required field.
     */
    @Column(name = "event_date", nullable = false)
    private LocalDateTime eventDate;

    /**
     * The location of the event.
     * location is a required field.
     */
    @Column(name = "location", nullable = false)
    private String location;

    /**
     * The creator of the event.
     * creator is an object of type User.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "creator_id", nullable = false)
    private User creator;

    /**
     * The bridging table between the event and the user tables.
     * Use the bridge table to handle the @ManyToMany relationship.
     * Because a user can have multiple events. And an event could belong to many users.
     * User -||---|< event_registration >|---||- Event
     */
    @ManyToMany
    @JoinTable(
            name = "event_registration", // bridge table name
            // event_id is the foreign key that references the event table's id
            // user_id is the foreign key that references the user table's id
            joinColumns = @JoinColumn(name = "event_id"), // event_id is the event table's id
            inverseJoinColumns = @JoinColumn(name = "user_id") // user_id is the user table's id
    )
    private Set<User> participants = new HashSet<>();

    /**
     * Default no-arg constructor required by JPA.
     */
    protected Event() {
        this.id = UUIDutil.getId();
    }

    /**
     * Constructor for a fully specified event.
     *
     * @param title The title of the event.
     * @param description The description of the event.
     * @param eventDate The date of the event.
     * @param location The location of the event.
     * @param creator The creator of the event.
     */
    public Event(String title, String description, LocalDateTime eventDate, String location, User creator, Set<User> participants) {
        this.id = UUIDutil.getId();
        this.setTitle(title);
        this.description = description;
        this.setEventDate(eventDate);
        this.setLocation(location);
        this.setCreator(creator);
        this.participants = (participants != null) ? participants : new HashSet<>();
    }

    /**
     * constructors a basic event with only required fields.
     *
     * @param title The title of the event.
     * @param eventDate The date of the event.
     * @param location The location of the event.
     * @param creator The creator of the event.
     */
    public Event(String title, LocalDateTime eventDate, String location, User creator) {
        this(title, "", eventDate, location, creator, new HashSet<>());
    }

    // Getters and Setters
    /**
     * Get the UUID of the event.
     * @return The UUID of the event.
     */
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    /**
     * Get the title of the event.
     * @return The title of the event.
     */
    public String getTitle() { return title; }
    public void setTitle(String title) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("Title cannot be null or empty");
        }
        this.title = title;
    }

    /**
     * Get the description of the event.
     * @return The description of the event.
     */
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    /**
     * Get the date of the event.
     * @return The date of the event.
     */
    public LocalDateTime getEventDate() { return eventDate; }
    public void setEventDate(LocalDateTime eventDate) {
        if (eventDate == null) {
            throw new IllegalArgumentException("Event date cannot be null.");
        }
        this.eventDate = eventDate;
    }

    /**
     * Get the location of the event.
     * @return The location of the event.
     */
    public String getLocation() { return location; }
    public void setLocation(String location) {
        if (location == null || location.trim().isEmpty()) {
            throw new IllegalArgumentException("Location cannot be null or empty.");
        }
        this.location = location;
    }

    /**
     * Get the creator of the event.
     * @return The creator of the event.
     */
    public User getCreator() { return creator; }
    public void setCreator(User creator) {
        if (creator == null) {
            throw new IllegalArgumentException("Creator cannot be null.");
        }
        this.creator = creator;
    }

    /**
     * Get the set of participants of the event.
     * @return The set of participants of the event.
     */
    public Set<User> getParticipants() { return participants; }
    public void setParticipants(Set<User> participants) {
        this.participants = (participants != null) ? participants : new HashSet<>();
    }

    /**
     * Validates that required fields are present and not empty.
     * @return True if the event is valid, false otherwise.
     */
    public boolean validate() {
        return title != null && !title.trim().isEmpty() &&
                eventDate != null &&
                location != null && !location.trim().isEmpty() &&
                creator != null;
    }

    /**
     * @return A string representation of the event.
     */
    @Override
    public String toString() {
        return "Event{" +
                "id='" + id + '\'' +
                ", title='" + title + '\'' +
                ", description='" + description + '\'' +
                ", eventDate=" + eventDate +
                ", location='" + location + '\'' +
                ", creator=" + creator +
                ", participants=" + participants +
                '}';
    }
}
